//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/NetcodePlus/Demo/Scripts/Kayak/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using Unity.Netcode;

namespace NetcodePlus.Demo
{
    public partial class PlayerControl: SNetworkPlayer, IInputActionCollection2, IDisposable
    {
    public InputActionAsset asset { get; }
    public PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""d067bd81-b611-4ac0-b14a-6cc4365d7447"",
            ""actions"": [
                {
                    ""name"": ""NormalStroke"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d7db18ac-5564-40b4-b4a5-9c8f6c7d0230"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WideStroke"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ecfdd206-475d-453a-aed9-43ad0dd7bf33"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SideStroke"",
                    ""type"": ""PassThrough"",
                    ""id"": ""aabdbc2e-b067-45cc-adbe-bd98e522f625"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RudderAxis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5cb49621-c06c-4b76-a6ae-1dca66c8cf47"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EdgeAxis"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5d32807e-172c-4d8a-8ee7-64c27a6cb789"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""BackStroke"",
                    ""type"": ""PassThrough"",
                    ""id"": ""cc8e623e-db6a-4fc2-8f6e-0b3a8b748239"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Value"",
                    ""id"": ""d81e27ff-19e4-437a-ab5b-f8c6faad3413"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Controller"",
                    ""id"": ""23b5474c-9210-4abb-aa75-34fb63d6543c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""cf46c468-5963-4be3-b831-458d6d143e53"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e406150c-2561-40d8-9874-05bbe47644ab"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""e9cf15aa-4434-458a-b1a5-f4ac4a5458e7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bd392ac1-cfbb-4873-9bf2-9e84d958ae7b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d1215fd2-e81f-48ed-b32f-15ef1a65754a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NormalStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""18ff3f6a-0cac-4a8e-ba28-cd3c68237209"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WideStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2cb0cc96-316b-4c73-9a15-8e750b05c66d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""WideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f6f86952-50c5-4191-9d08-a83609d5aa2a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""WideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""de24d84c-df4a-4ed1-9ec0-ad5145a31d1d"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WideStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0f0240a1-531e-4235-832f-2bd8589c92fa"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""WideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b47f87eb-643a-439c-b5cf-255291b277e1"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""WideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""8cdd57ad-4cf6-4019-a341-ab8310f4678a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""db5205c8-30bc-4a6c-847f-d6a6fb14347f"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""1b44dcbf-6a00-417a-b880-87d5f6f171f4"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""090f6477-1c0f-44ac-845c-79e97fe17a04"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1816a3e3-8997-46ab-98c9-5d842884c6f5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0a76df4f-fbd0-4fa6-afe8-f19cde2dec09"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""RudderAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""cd7c1a0d-ad3c-4266-9a4d-2191e520e971"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ef542b07-fa9b-4535-8d38-10e850d7bbd1"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2edaf0ef-9d3f-4111-b5bc-b84c6068f38a"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""SideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""56920f2c-ac48-458d-b0c4-ac0d5164bd6e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SideStroke"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7c628963-bdec-410e-956b-77f484f4f177"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""SideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""20759d41-c2f1-49a1-b47c-a1a0fb6c8f35"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""SideStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""9f79b0e9-f915-4eef-97a6-b7abdfa75cb8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""fab5fc6d-30c3-438f-9ac4-3b1af12ad4f5"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b3fe0f23-ee90-4224-96f7-c67caeeec32b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""488b8b19-ccf6-445f-b4f1-822be02f665a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2ba1e673-9dc6-44fa-a81a-73ced90c755a"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""24aafd00-8f57-45a9-835b-513919936658"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""EdgeAxis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7e039ad7-dd25-4bde-80f5-465c9da9ec3c"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone(min=0.25)"",
                    ""groups"": ""Gamepad"",
                    ""action"": ""BackStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c57d267b-1b84-43e1-bf2c-e449d5751abe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""BackStroke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8075e550-6163-4d27-a9d0-f9a392e97b29"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB;Gamepad"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Land Movement"",
            ""id"": ""db30a9ee-7fa3-4a49-b9e7-52c7bfa59a3d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f2b9ba9b-654a-4b3c-877f-637c28ba0a49"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74653d32-41ae-456b-9eee-cca4c51acddb"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""943e3163-eab0-451f-9373-da4a1d630fdf"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c7d52322-1eda-43c4-bb46-13cc7c1e676f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""16d04aab-a438-4b27-9ffb-9a4cd1a591ea"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1200674d-6363-4015-a3d9-23c8cd0e5a8d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1faeb575-7a0e-4a23-98bf-ff8ef862aee8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KB"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""KB"",
            ""bindingGroup"": ""KB"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_NormalStroke = m_Player.FindAction("NormalStroke", throwIfNotFound: true);
        m_Player_WideStroke = m_Player.FindAction("WideStroke", throwIfNotFound: true);
        m_Player_SideStroke = m_Player.FindAction("SideStroke", throwIfNotFound: true);
        m_Player_RudderAxis = m_Player.FindAction("RudderAxis", throwIfNotFound: true);
        m_Player_EdgeAxis = m_Player.FindAction("EdgeAxis", throwIfNotFound: true);
        m_Player_BackStroke = m_Player.FindAction("BackStroke", throwIfNotFound: true);
        m_Player_Escape = m_Player.FindAction("Escape", throwIfNotFound: true);
        // Player Land Movement
        m_PlayerLandMovement = asset.FindActionMap("Player Land Movement", throwIfNotFound: true);
        m_PlayerLandMovement_Movement = m_PlayerLandMovement.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        public override bool Equals(object other)
        {
            return base.Equals(other);
        }

        public override string ToString()
        {
            return base.ToString();
        }

        protected override void OnReady()
        {
            base.OnReady();
        }

        protected override void OnDespawn()
        {
            base.OnDespawn();
        }

        protected override void Awake()
        {
            base.Awake();
        }

        protected override void OnDestroy()
        {
            base.OnDestroy();
        }

        protected override void OnBeforeSpawn()
        {
            base.OnBeforeSpawn();
        }

        protected override void OnSpawn()
        {
            base.OnSpawn();
        }

        // Player
        private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_NormalStroke;
    private readonly InputAction m_Player_WideStroke;
    private readonly InputAction m_Player_SideStroke;
    private readonly InputAction m_Player_RudderAxis;
    private readonly InputAction m_Player_EdgeAxis;
    private readonly InputAction m_Player_BackStroke;
    private readonly InputAction m_Player_Escape;
    public struct PlayerActions
    {
        private PlayerControl m_Wrapper;
        public PlayerActions(PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @NormalStroke => m_Wrapper.m_Player_NormalStroke;
        public InputAction @WideStroke => m_Wrapper.m_Player_WideStroke;
        public InputAction @SideStroke => m_Wrapper.m_Player_SideStroke;
        public InputAction @RudderAxis => m_Wrapper.m_Player_RudderAxis;
        public InputAction @EdgeAxis => m_Wrapper.m_Player_EdgeAxis;
        public InputAction @BackStroke => m_Wrapper.m_Player_BackStroke;
        public InputAction @Escape => m_Wrapper.m_Player_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @NormalStroke.started += instance.OnNormalStroke;
            @NormalStroke.performed += instance.OnNormalStroke;
            @NormalStroke.canceled += instance.OnNormalStroke;
            @WideStroke.started += instance.OnWideStroke;
            @WideStroke.performed += instance.OnWideStroke;
            @WideStroke.canceled += instance.OnWideStroke;
            @SideStroke.started += instance.OnSideStroke;
            @SideStroke.performed += instance.OnSideStroke;
            @SideStroke.canceled += instance.OnSideStroke;
            @RudderAxis.started += instance.OnRudderAxis;
            @RudderAxis.performed += instance.OnRudderAxis;
            @RudderAxis.canceled += instance.OnRudderAxis;
            @EdgeAxis.started += instance.OnEdgeAxis;
            @EdgeAxis.performed += instance.OnEdgeAxis;
            @EdgeAxis.canceled += instance.OnEdgeAxis;
            @BackStroke.started += instance.OnBackStroke;
            @BackStroke.performed += instance.OnBackStroke;
            @BackStroke.canceled += instance.OnBackStroke;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @NormalStroke.started -= instance.OnNormalStroke;
            @NormalStroke.performed -= instance.OnNormalStroke;
            @NormalStroke.canceled -= instance.OnNormalStroke;
            @WideStroke.started -= instance.OnWideStroke;
            @WideStroke.performed -= instance.OnWideStroke;
            @WideStroke.canceled -= instance.OnWideStroke;
            @SideStroke.started -= instance.OnSideStroke;
            @SideStroke.performed -= instance.OnSideStroke;
            @SideStroke.canceled -= instance.OnSideStroke;
            @RudderAxis.started -= instance.OnRudderAxis;
            @RudderAxis.performed -= instance.OnRudderAxis;
            @RudderAxis.canceled -= instance.OnRudderAxis;
            @EdgeAxis.started -= instance.OnEdgeAxis;
            @EdgeAxis.performed -= instance.OnEdgeAxis;
            @EdgeAxis.canceled -= instance.OnEdgeAxis;
            @BackStroke.started -= instance.OnBackStroke;
            @BackStroke.performed -= instance.OnBackStroke;
            @BackStroke.canceled -= instance.OnBackStroke;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Player Land Movement
    private readonly InputActionMap m_PlayerLandMovement;
    private List<IPlayerLandMovementActions> m_PlayerLandMovementActionsCallbackInterfaces = new List<IPlayerLandMovementActions>();
    private readonly InputAction m_PlayerLandMovement_Movement;
    public struct PlayerLandMovementActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerLandMovementActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerLandMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PlayerLandMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerLandMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerLandMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerLandMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerLandMovementActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerLandMovementActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerLandMovementActions instance)
        {
            if (m_Wrapper.m_PlayerLandMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerLandMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerLandMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerLandMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerLandMovementActions @PlayerLandMovement => new PlayerLandMovementActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_KBSchemeIndex = -1;
    public InputControlScheme KBScheme
    {
        get
        {
            if (m_KBSchemeIndex == -1) m_KBSchemeIndex = asset.FindControlSchemeIndex("KB");
            return asset.controlSchemes[m_KBSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnNormalStroke(InputAction.CallbackContext context);
        void OnWideStroke(InputAction.CallbackContext context);
        void OnSideStroke(InputAction.CallbackContext context);
        void OnRudderAxis(InputAction.CallbackContext context);
        void OnEdgeAxis(InputAction.CallbackContext context);
        void OnBackStroke(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IPlayerLandMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
}
